0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'install',
1 verbose cli   '-g',
1 verbose cli   'grunt-cli' ]
2 info using npm@1.4.3
3 info using node@v0.10.26
4 verbose node symlink C:\Program Files\nodejs\\node.exe
5 verbose cache add [ 'grunt-cli', null ]
6 verbose cache add name=undefined spec="grunt-cli" args=["grunt-cli",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: 'grunt-cli',
7 verbose parsed url   path: 'grunt-cli',
7 verbose parsed url   href: 'grunt-cli' }
8 silly lockFile 671ef8ac-grunt-cli grunt-cli
9 verbose lock grunt-cli C:\Users\liz\AppData\Roaming\npm-cache\671ef8ac-grunt-cli.lock
10 silly lockFile 671ef8ac-grunt-cli grunt-cli
11 silly lockFile 671ef8ac-grunt-cli grunt-cli
12 verbose addNamed [ 'grunt-cli', '' ]
13 verbose addNamed [ null, '*' ]
14 silly lockFile d63f3d0b-grunt-cli grunt-cli@
15 verbose lock grunt-cli@ C:\Users\liz\AppData\Roaming\npm-cache\d63f3d0b-grunt-cli.lock
16 silly addNameRange { name: 'grunt-cli', range: '*', hasData: false }
17 verbose url raw grunt-cli
18 verbose url resolving [ 'https://registry.npmjs.org/', './grunt-cli' ]
19 verbose url resolved https://registry.npmjs.org/grunt-cli
20 info trying registry request attempt 1 at 17:23:13
21 verbose etag "73L7X7PJGLBNEW47Z9F0IMQY3"
22 http GET https://registry.npmjs.org/grunt-cli
23 http 304 https://registry.npmjs.org/grunt-cli
24 silly registry.get cb [ 304,
24 silly registry.get   { date: 'Sun, 16 Mar 2014 09:23:17 GMT',
24 silly registry.get     server: 'Apache',
24 silly registry.get     via: '1.1 varnish',
24 silly registry.get     'last-modified': 'Sun, 16 Mar 2014 09:23:17 GMT',
24 silly registry.get     'cache-control': 'max-age=1',
24 silly registry.get     etag: '"73L7X7PJGLBNEW47Z9F0IMQY3"',
24 silly registry.get     'x-served-by': 'cache-ty68-TYO',
24 silly registry.get     'x-cache': 'MISS',
24 silly registry.get     'x-cache-hits': '0',
24 silly registry.get     'x-timer': 'S1394961797.121588230,VS0,VE289',
24 silly registry.get     vary: 'Accept',
24 silly registry.get     'content-length': '0',
24 silly registry.get     'keep-alive': 'timeout=10, max=50',
24 silly registry.get     connection: 'Keep-Alive' } ]
25 verbose etag grunt-cli from cache
26 silly addNameRange number 2 { name: 'grunt-cli', range: '*', hasData: true }
27 silly addNameRange versions [ 'grunt-cli',
27 silly addNameRange   [ '0.1.0',
27 silly addNameRange     '0.1.1',
27 silly addNameRange     '0.1.2',
27 silly addNameRange     '0.1.3',
27 silly addNameRange     '0.1.4',
27 silly addNameRange     '0.1.5',
27 silly addNameRange     '0.1.6',
27 silly addNameRange     '0.1.7',
27 silly addNameRange     '0.1.8',
27 silly addNameRange     '0.1.9',
27 silly addNameRange     '0.1.10',
27 silly addNameRange     '0.1.11',
27 silly addNameRange     '0.1.12',
27 silly addNameRange     '0.1.13' ] ]
28 verbose addNamed [ 'grunt-cli', '0.1.13' ]
29 verbose addNamed [ '0.1.13', '0.1.13' ]
30 silly lockFile 28997503-grunt-cli-0-1-13 grunt-cli@0.1.13
31 verbose lock grunt-cli@0.1.13 C:\Users\liz\AppData\Roaming\npm-cache\28997503-grunt-cli-0-1-13.lock
32 silly lockFile 28997503-grunt-cli-0-1-13 grunt-cli@0.1.13
33 silly lockFile 28997503-grunt-cli-0-1-13 grunt-cli@0.1.13
34 silly lockFile d63f3d0b-grunt-cli grunt-cli@
35 silly lockFile d63f3d0b-grunt-cli grunt-cli@
36 silly resolved [ { name: 'grunt-cli',
36 silly resolved     description: 'The grunt command line interface.',
36 silly resolved     version: '0.1.13',
36 silly resolved     author: { name: 'Grunt Team' },
36 silly resolved     homepage: 'http://gruntjs.com/',
36 silly resolved     repository: { type: 'git', url: 'git://github.com/gruntjs/grunt-cli.git' },
36 silly resolved     bugs: { url: 'http://github.com/gruntjs/grunt-cli/issues' },
36 silly resolved     licenses: [ [Object] ],
36 silly resolved     bin: { grunt: 'bin/grunt' },
36 silly resolved     engines: { node: '>= 0.8.0' },
36 silly resolved     scripts: { test: 'node bin/grunt test' },
36 silly resolved     preferGlobal: true,
36 silly resolved     dependencies: { nopt: '~1.0.10', 'findup-sync': '~0.1.0', resolve: '~0.3.1' },
36 silly resolved     devDependencies: { grunt: '~0.4.0', 'grunt-contrib-jshint': '~0.2.0' },
36 silly resolved     contributors: [ [Object], [Object], [Object], [Object] ],
36 silly resolved     readme: '# grunt-cli [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-cli.png?branch=master)](http://travis-ci.org/gruntjs/grunt-cli)\n> The Grunt command line interface.\n\nInstall this globally and you\'ll have access to the `grunt` command anywhere on your system.\n\n```shell\nnpm install -g grunt-cli\n```\n\n**Note:** The job of the `grunt` command is to load and run the version of Grunt you have installed locally to your project, irrespective of its version.  Starting with Grunt v0.4, you should never install Grunt itself globally.  For more information about why, [please read this](http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation).\n\nSee the [Getting Started](http://gruntjs.com/getting-started) guide for more information.\n\n## Shell tab auto-completion\nTo enable tab auto-completion for Grunt, add one of the following lines to your `~/.bashrc` or `~/.zshrc` file.\n\n```bash\n# Bash, ~/.bashrc\neval "$(grunt --completion=bash)"\n```\n\n```bash\n# Zsh, ~/.zshrc\neval "$(grunt --completion=zsh)"\n```\n\n## Installing grunt-cli locally\nIf you prefer the idiomatic Node.js method to get started with a project (`npm install && npm test`) then install grunt-cli locally with `npm install grunt-cli --save-dev`. Then add a script to your `package.json` to run the associated grunt command: `"scripts": { "test": "grunt test" } `. Now `npm test` will use the locally installed `./node_modules/.bin/grunt` executable to run your Grunt commands.\n\nTo read more about npm scripts, please visit the npm docs: [https://npmjs.org/doc/misc/npm-scripts.html](https://npmjs.org/doc/misc/npm-scripts.html).\n',
36 silly resolved     readmeFilename: 'README.md',
36 silly resolved     _id: 'grunt-cli@0.1.13',
36 silly resolved     _from: 'grunt-cli@' } ]
37 info install grunt-cli@0.1.13 into C:\Users\liz\AppData\Roaming\npm
38 info installOne grunt-cli@0.1.13
39 info C:\Users\liz\AppData\Roaming\npm\node_modules\grunt-cli unbuild
40 info preuninstall grunt-cli@0.1.13
41 info uninstall grunt-cli@0.1.13
42 verbose true,C:\Users\liz\AppData\Roaming\npm\node_modules,C:\Users\liz\AppData\Roaming\npm\node_modules unbuild grunt-cli@0.1.13
43 verbose C:\Users\liz\AppData\Roaming\npm,[object Object] binRoot
44 info postuninstall grunt-cli@0.1.13
45 verbose tar unpack C:\Users\liz\AppData\Roaming\npm-cache\grunt-cli\0.1.13\package.tgz
46 silly lockFile a0fc38af-aming-npm-node-modules-grunt-cli tar://C:\Users\liz\AppData\Roaming\npm\node_modules\grunt-cli
47 verbose lock tar://C:\Users\liz\AppData\Roaming\npm\node_modules\grunt-cli C:\Users\liz\AppData\Roaming\npm-cache\a0fc38af-aming-npm-node-modules-grunt-cli.lock
48 silly lockFile e833238d-che-grunt-cli-0-1-13-package-tgz tar://C:\Users\liz\AppData\Roaming\npm-cache\grunt-cli\0.1.13\package.tgz
49 verbose lock tar://C:\Users\liz\AppData\Roaming\npm-cache\grunt-cli\0.1.13\package.tgz C:\Users\liz\AppData\Roaming\npm-cache\e833238d-che-grunt-cli-0-1-13-package-tgz.lock
50 silly gunzTarPerm modes [ '755', '644' ]
51 silly gunzTarPerm extractEntry package.json
52 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
53 silly gunzTarPerm extractEntry .npmignore
54 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
55 silly gunzTarPerm extractEntry README.md
56 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
57 silly gunzTarPerm extractEntry Gruntfile.js
58 silly gunzTarPerm modified mode [ 'Gruntfile.js', 438, 420 ]
59 silly gunzTarPerm extractEntry .travis.yml
60 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
61 silly gunzTarPerm extractEntry AUTHORS
62 silly gunzTarPerm modified mode [ 'AUTHORS', 438, 420 ]
63 silly gunzTarPerm extractEntry LICENSE-MIT
64 silly gunzTarPerm modified mode [ 'LICENSE-MIT', 438, 420 ]
65 silly gunzTarPerm extractEntry bin/grunt
66 silly gunzTarPerm modified mode [ 'bin/grunt', 438, 420 ]
67 silly gunzTarPerm extractEntry completion/bash
68 silly gunzTarPerm modified mode [ 'completion/bash', 438, 420 ]
69 silly gunzTarPerm extractEntry completion/zsh
70 silly gunzTarPerm modified mode [ 'completion/zsh', 438, 420 ]
71 silly gunzTarPerm extractEntry lib/cli.js
72 silly gunzTarPerm modified mode [ 'lib/cli.js', 438, 420 ]
73 silly gunzTarPerm extractEntry lib/completion.js
74 silly gunzTarPerm modified mode [ 'lib/completion.js', 438, 420 ]
75 silly gunzTarPerm extractEntry lib/info.js
76 silly gunzTarPerm modified mode [ 'lib/info.js', 438, 420 ]
77 silly lockFile a0fc38af-aming-npm-node-modules-grunt-cli tar://C:\Users\liz\AppData\Roaming\npm\node_modules\grunt-cli
78 silly lockFile a0fc38af-aming-npm-node-modules-grunt-cli tar://C:\Users\liz\AppData\Roaming\npm\node_modules\grunt-cli
79 silly lockFile e833238d-che-grunt-cli-0-1-13-package-tgz tar://C:\Users\liz\AppData\Roaming\npm-cache\grunt-cli\0.1.13\package.tgz
80 silly lockFile e833238d-che-grunt-cli-0-1-13-package-tgz tar://C:\Users\liz\AppData\Roaming\npm-cache\grunt-cli\0.1.13\package.tgz
81 info preinstall grunt-cli@0.1.13
82 verbose readDependencies using package.json deps
83 verbose readDependencies using package.json deps
84 verbose cache add [ 'nopt@~1.0.10', null ]
85 verbose cache add name=undefined spec="nopt@~1.0.10" args=["nopt@~1.0.10",null]
86 verbose parsed url { protocol: null,
86 verbose parsed url   slashes: null,
86 verbose parsed url   auth: null,
86 verbose parsed url   host: null,
86 verbose parsed url   port: null,
86 verbose parsed url   hostname: null,
86 verbose parsed url   hash: null,
86 verbose parsed url   search: null,
86 verbose parsed url   query: null,
86 verbose parsed url   pathname: 'nopt@~1.0.10',
86 verbose parsed url   path: 'nopt@~1.0.10',
86 verbose parsed url   href: 'nopt@~1.0.10' }
87 verbose cache add name="nopt" spec="~1.0.10" args=["nopt","~1.0.10"]
88 verbose parsed url { protocol: null,
88 verbose parsed url   slashes: null,
88 verbose parsed url   auth: null,
88 verbose parsed url   host: null,
88 verbose parsed url   port: null,
88 verbose parsed url   hostname: null,
88 verbose parsed url   hash: null,
88 verbose parsed url   search: null,
88 verbose parsed url   query: null,
88 verbose parsed url   pathname: '~1.0.10',
88 verbose parsed url   path: '~1.0.10',
88 verbose parsed url   href: '~1.0.10' }
89 verbose addNamed [ 'nopt', '~1.0.10' ]
90 verbose addNamed [ null, '>=1.0.10-0 <1.1.0-0' ]
91 silly lockFile 79f78dba-nopt-1-0-10 nopt@~1.0.10
92 verbose lock nopt@~1.0.10 C:\Users\liz\AppData\Roaming\npm-cache\79f78dba-nopt-1-0-10.lock
93 verbose cache add [ 'findup-sync@~0.1.0', null ]
94 verbose cache add name=undefined spec="findup-sync@~0.1.0" args=["findup-sync@~0.1.0",null]
95 verbose parsed url { protocol: null,
95 verbose parsed url   slashes: null,
95 verbose parsed url   auth: null,
95 verbose parsed url   host: null,
95 verbose parsed url   port: null,
95 verbose parsed url   hostname: null,
95 verbose parsed url   hash: null,
95 verbose parsed url   search: null,
95 verbose parsed url   query: null,
95 verbose parsed url   pathname: 'findup-sync@~0.1.0',
95 verbose parsed url   path: 'findup-sync@~0.1.0',
95 verbose parsed url   href: 'findup-sync@~0.1.0' }
96 verbose cache add name="findup-sync" spec="~0.1.0" args=["findup-sync","~0.1.0"]
97 verbose parsed url { protocol: null,
97 verbose parsed url   slashes: null,
97 verbose parsed url   auth: null,
97 verbose parsed url   host: null,
97 verbose parsed url   port: null,
97 verbose parsed url   hostname: null,
97 verbose parsed url   hash: null,
97 verbose parsed url   search: null,
97 verbose parsed url   query: null,
97 verbose parsed url   pathname: '~0.1.0',
97 verbose parsed url   path: '~0.1.0',
97 verbose parsed url   href: '~0.1.0' }
98 verbose addNamed [ 'findup-sync', '~0.1.0' ]
99 verbose addNamed [ null, '>=0.1.0-0 <0.2.0-0' ]
100 silly lockFile 625605b9-findup-sync-0-1-0 findup-sync@~0.1.0
101 verbose lock findup-sync@~0.1.0 C:\Users\liz\AppData\Roaming\npm-cache\625605b9-findup-sync-0-1-0.lock
102 verbose cache add [ 'resolve@~0.3.1', null ]
103 verbose cache add name=undefined spec="resolve@~0.3.1" args=["resolve@~0.3.1",null]
104 verbose parsed url { protocol: null,
104 verbose parsed url   slashes: null,
104 verbose parsed url   auth: null,
104 verbose parsed url   host: null,
104 verbose parsed url   port: null,
104 verbose parsed url   hostname: null,
104 verbose parsed url   hash: null,
104 verbose parsed url   search: null,
104 verbose parsed url   query: null,
104 verbose parsed url   pathname: 'resolve@~0.3.1',
104 verbose parsed url   path: 'resolve@~0.3.1',
104 verbose parsed url   href: 'resolve@~0.3.1' }
105 verbose cache add name="resolve" spec="~0.3.1" args=["resolve","~0.3.1"]
106 verbose parsed url { protocol: null,
106 verbose parsed url   slashes: null,
106 verbose parsed url   auth: null,
106 verbose parsed url   host: null,
106 verbose parsed url   port: null,
106 verbose parsed url   hostname: null,
106 verbose parsed url   hash: null,
106 verbose parsed url   search: null,
106 verbose parsed url   query: null,
106 verbose parsed url   pathname: '~0.3.1',
106 verbose parsed url   path: '~0.3.1',
106 verbose parsed url   href: '~0.3.1' }
107 verbose addNamed [ 'resolve', '~0.3.1' ]
108 verbose addNamed [ null, '>=0.3.1-0 <0.4.0-0' ]
109 silly lockFile 7958d065-resolve-0-3-1 resolve@~0.3.1
110 verbose lock resolve@~0.3.1 C:\Users\liz\AppData\Roaming\npm-cache\7958d065-resolve-0-3-1.lock
111 silly addNameRange { name: 'nopt', range: '>=1.0.10-0 <1.1.0-0', hasData: false }
112 silly addNameRange { name: 'findup-sync',
112 silly addNameRange   range: '>=0.1.0-0 <0.2.0-0',
112 silly addNameRange   hasData: false }
113 verbose url raw nopt
114 verbose url resolving [ 'https://registry.npmjs.org/', './nopt' ]
115 verbose url resolved https://registry.npmjs.org/nopt
116 info trying registry request attempt 1 at 17:23:15
117 verbose etag "CCR94OD8D3JUDXDPUPDMAX5N8"
118 http GET https://registry.npmjs.org/nopt
119 verbose url raw findup-sync
120 verbose url resolving [ 'https://registry.npmjs.org/', './findup-sync' ]
121 verbose url resolved https://registry.npmjs.org/findup-sync
122 info trying registry request attempt 1 at 17:23:15
123 verbose etag "A1PRRWUUCC4BVV8XLTJPGUS2U"
124 http GET https://registry.npmjs.org/findup-sync
125 silly addNameRange { name: 'resolve', range: '>=0.3.1-0 <0.4.0-0', hasData: false }
126 verbose url raw resolve
127 verbose url resolving [ 'https://registry.npmjs.org/', './resolve' ]
128 verbose url resolved https://registry.npmjs.org/resolve
129 info trying registry request attempt 1 at 17:23:15
130 http GET https://registry.npmjs.org/resolve
131 http 304 https://registry.npmjs.org/findup-sync
132 silly registry.get cb [ 304,
132 silly registry.get   { date: 'Sun, 16 Mar 2014 09:23:18 GMT',
132 silly registry.get     server: 'Apache',
132 silly registry.get     via: '1.1 varnish',
132 silly registry.get     'last-modified': 'Sun, 16 Mar 2014 09:23:19 GMT',
132 silly registry.get     'cache-control': 'max-age=1',
132 silly registry.get     etag: '"A1PRRWUUCC4BVV8XLTJPGUS2U"',
132 silly registry.get     'x-served-by': 'cache-ty66-TYO',
132 silly registry.get     'x-cache': 'MISS',
132 silly registry.get     'x-cache-hits': '0',
132 silly registry.get     'x-timer': 'S1394961798.711981058,VS0,VE306',
132 silly registry.get     vary: 'Accept',
132 silly registry.get     'content-length': '0',
132 silly registry.get     'keep-alive': 'timeout=10, max=50',
132 silly registry.get     connection: 'Keep-Alive' } ]
133 verbose etag findup-sync from cache
134 silly addNameRange number 2 { name: 'findup-sync',
134 silly addNameRange   range: '>=0.1.0-0 <0.2.0-0',
134 silly addNameRange   hasData: true }
135 silly addNameRange versions [ 'findup-sync', [ '0.1.0', '0.1.1', '0.1.2', '0.1.3' ] ]
136 verbose addNamed [ 'findup-sync', '0.1.3' ]
137 verbose addNamed [ '0.1.3', '0.1.3' ]
138 silly lockFile 7d59adfa-findup-sync-0-1-3 findup-sync@0.1.3
139 verbose lock findup-sync@0.1.3 C:\Users\liz\AppData\Roaming\npm-cache\7d59adfa-findup-sync-0-1-3.lock
140 silly lockFile 7d59adfa-findup-sync-0-1-3 findup-sync@0.1.3
141 silly lockFile 7d59adfa-findup-sync-0-1-3 findup-sync@0.1.3
142 silly lockFile 625605b9-findup-sync-0-1-0 findup-sync@~0.1.0
143 silly lockFile 625605b9-findup-sync-0-1-0 findup-sync@~0.1.0
144 http 304 https://registry.npmjs.org/nopt
145 silly registry.get cb [ 304,
145 silly registry.get   { date: 'Sun, 16 Mar 2014 09:23:18 GMT',
145 silly registry.get     server: 'Apache',
145 silly registry.get     via: '1.1 varnish',
145 silly registry.get     'last-modified': 'Sun, 16 Mar 2014 09:23:19 GMT',
145 silly registry.get     'cache-control': 'max-age=1',
145 silly registry.get     etag: '"CCR94OD8D3JUDXDPUPDMAX5N8"',
145 silly registry.get     'x-served-by': 'cache-ty67-TYO',
145 silly registry.get     'x-cache': 'MISS',
145 silly registry.get     'x-cache-hits': '0',
145 silly registry.get     'x-timer': 'S1394961798.743067503,VS0,VE574',
145 silly registry.get     vary: 'Accept',
145 silly registry.get     'content-length': '0',
145 silly registry.get     'keep-alive': 'timeout=10, max=50',
145 silly registry.get     connection: 'Keep-Alive' } ]
146 verbose etag nopt from cache
147 silly addNameRange number 2 { name: 'nopt', range: '>=1.0.10-0 <1.1.0-0', hasData: true }
148 silly addNameRange versions [ 'nopt',
148 silly addNameRange   [ '1.0.0',
148 silly addNameRange     '1.0.1',
148 silly addNameRange     '1.0.2',
148 silly addNameRange     '1.0.3',
148 silly addNameRange     '1.0.4',
148 silly addNameRange     '1.0.5',
148 silly addNameRange     '1.0.6',
148 silly addNameRange     '1.0.7',
148 silly addNameRange     '1.0.8',
148 silly addNameRange     '1.0.9',
148 silly addNameRange     '1.0.10',
148 silly addNameRange     '2.0.0',
148 silly addNameRange     '2.1.0',
148 silly addNameRange     '2.1.1',
148 silly addNameRange     '2.1.2',
148 silly addNameRange     '2.2.0' ] ]
149 verbose addNamed [ 'nopt', '1.0.10' ]
150 verbose addNamed [ '1.0.10', '1.0.10' ]
151 silly lockFile 1be903a1-nopt-1-0-10 nopt@1.0.10
152 verbose lock nopt@1.0.10 C:\Users\liz\AppData\Roaming\npm-cache\1be903a1-nopt-1-0-10.lock
153 silly lockFile 1be903a1-nopt-1-0-10 nopt@1.0.10
154 silly lockFile 1be903a1-nopt-1-0-10 nopt@1.0.10
155 silly lockFile 79f78dba-nopt-1-0-10 nopt@~1.0.10
156 silly lockFile 79f78dba-nopt-1-0-10 nopt@~1.0.10
157 http 200 https://registry.npmjs.org/resolve
158 verbose bad json {"_id":"resolve","_rev":"59-1cc5b3baf687407f3e5fb09bde8bae96","name":"resolve","description":"resolve like require.resolve() on behalf of files asynchronously and synchronously","dist-tags":{"latest":"0.6.1"},"versions":{"0.0.0":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.0.0","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"expresso"},"dependencies":{},"devDependencies":{"expresso":"=0.7.x"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_id":"resolve@0.0.0","_engineSupported":true,"_npmVersion":"1.0.10","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"9a74e26be2ea4fb18960236f1448b0e38bcc93e5","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.0.0.tgz"}},"0.0.1":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.0.1","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"expresso"},"dependencies":{},"devDependencies":{"expresso":"=0.7.x"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_id":"resolve@0.0.1","_engineSupported":true,"_npmVersion":"1.0.10","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"d7188e3ae59196f3556cd4cfcedf7a9b12fb55e9","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.0.1.tgz"}},"0.0.2":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.0.2","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"expresso"},"dependencies":{},"devDependencies":{"expresso":"=0.7.x"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_id":"resolve@0.0.2","_engineSupported":true,"_npmVersion":"1.0.10","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"9c6835475096251f8b2e292ddd45df2974c64162","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.0.2.tgz"}},"0.0.3":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.0.3","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"expresso"},"dependencies":{},"devDependencies":{"expresso":"=0.7.x"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_id":"resolve@0.0.3","_engineSupported":true,"_npmVersion":"1.0.10","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"8212502b729a63fe8dea0af1920a58538b161742","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.0.3.tgz"}},"0.0.4":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.0.4","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"expresso"},"dependencies":{},"devDependencies":{"expresso":"=0.7.x"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_id":"resolve@0.0.4","_engineSupported":true,"_npmVersion":"1.0.10","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"b3f7d9c3b46a0f512984940a4b23f30176dda95d","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.0.4.tgz"}},"0.1.0":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.1.0","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"expresso"},"dependencies":{},"devDependencies":{"expresso":"=0.7.x"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_npmJsonOpts":{"file":"/home/substack/.npm/resolve/0.1.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"resolve@0.1.0","_engineSupported":true,"_npmVersion":"1.0.30","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"de35cfc7e7048e566f99056ad0b06d7cce8d49cb","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.1.0.tgz"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.1.2":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.1.2","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"expresso"},"dependencies":{},"devDependencies":{"expresso":"=0.7.x"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_npmUser":{"name":"substack","email":"mail@substack.net"},"_id":"resolve@0.1.2","_engineSupported":true,"_npmVersion":"1.0.101","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"37eaa50a0b586adac455b9fa6dc45217e6b002e7","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.1.2.tgz"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.1.3":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.1.3","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"expresso"},"dependencies":{},"devDependencies":{"expresso":"=0.7.x"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_npmUser":{"name":"substack","email":"mail@substack.net"},"_id":"resolve@0.1.3","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"204c18364bc529a0b376e4a714b7ba44f0d390d1","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.1.3.tgz"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.0":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.2.0","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"expresso"},"dependencies":{},"devDependencies":{"expresso":"0.7.x"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_npmUser":{"name":"substack","email":"mail@substack.net"},"_id":"resolve@0.2.0","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"136daea49be374950974cd30858c66a6d1c9bbe4","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.2.0.tgz"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.1":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.2.1","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"tap test/*.js"},"dependencies":{},"devDependencies":{"tap":"~0.2.4"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_npmUser":{"name":"substack","email":"mail@substack.net"},"_id":"resolve@0.2.1","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"39689c97d867b40d865adec160358bee91da7f5a","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.2.1.tgz"},"readme":"","maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.2":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.2.2","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"tap test/*.js"},"dependencies":{},"devDependencies":{"tap":"~0.2.4"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_npmUser":{"name":"substack","email":"mail@substack.net"},"_id":"resolve@0.2.2","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"69116e81b47e0e4aa9a9231b271605a73dbf8b8d","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.2.2.tgz"},"readme":"","maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.3":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.2.3","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"tap test/*.js"},"dependencies":{},"devDependencies":{"tap":"~0.2.4"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"","_id":"resolve@0.2.3","dist":{"shasum":"f1eb7fb76436f91d87fd19c5f973fe7d506f6571","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.2.3.tgz"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.4":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.2.4","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"tap test/*.js"},"dependencies":{},"devDependencies":{"tap":"~0.2.4"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"resolve\u000a=======\u000a\u000aImplements the [node `require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000aexcept you can pass in the file to compute paths relatively to along with your\u000aown `require.paths` without updating the global copy (which doesn't even work in\u000anode `>=0.5`).\u000a\u000a[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\u000a\u000amethods\u000a=======\u000a\u000avar resolve = require('resolve');\u000a\u000aresolve.sync(pkg, opts)\u000a-----------------------\u000a\u000aSynchronously search for the package/filename string `pkg`\u000aaccording to the [`require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000afor `X=pkg` and `Y=opts.basedir`.\u000a\u000aDefault values for `opts`:\u000a\u000a````javascript\u000a{\u000a    paths : [],\u000a    basedir : __dirname,\u000a    extensions : [ '.js' ],\u000a    readFileSync : fs.readFileSync,\u000a    isFile : function (file) {\u000a        return path.existSync(file) && fs.statSync(file).isFile()\u000a    }\u000a}\u000a````\u000a\u000aOptionally you can specify a `opts.packageFilter` function to map the contents\u000aof `JSON.parse()`'d package.json files.\u000a\u000aIf nothing is found, all of the directories in `opts.paths` are searched.\u000a\u000aresolve.isCore(pkg)\u000a-------------------\u000a\u000aReturn whether a package is in core.\u000a","readmeFilename":"README.markdown","_id":"resolve@0.2.4","dist":{"shasum":"47d5e3e845108807480ffed66f40e533d330704d","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.2.4.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.5":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.2.5","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"tap test/*.js"},"dependencies":{},"devDependencies":{"tap":"~0.2.4"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"resolve\u000a=======\u000a\u000aImplements the [node `require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000aexcept you can pass in the file to compute paths relatively to along with your\u000aown `require.paths` without updating the global copy (which doesn't even work in\u000anode `>=0.5`).\u000a\u000a[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\u000a\u000amethods\u000a=======\u000a\u000avar resolve = require('resolve');\u000a\u000aresolve.sync(pkg, opts)\u000a-----------------------\u000a\u000aSynchronously search for the package/filename string `pkg`\u000aaccording to the [`require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000afor `X=pkg` and `Y=opts.basedir`.\u000a\u000aDefault values for `opts`:\u000a\u000a````javascript\u000a{\u000a    paths : [],\u000a    basedir : __dirname,\u000a    extensions : [ '.js' ],\u000a    readFileSync : fs.readFileSync,\u000a    isFile : function (file) {\u000a        return path.existSync(file) && fs.statSync(file).isFile()\u000a    }\u000a}\u000a````\u000a\u000aOptionally you can specify a `opts.packageFilter` function to map the contents\u000aof `JSON.parse()`'d package.json files.\u000a\u000aIf nothing is found, all of the directories in `opts.paths` are searched.\u000a\u000aresolve.isCore(pkg)\u000a-------------------\u000a\u000aReturn whether a package is in core.\u000a","readmeFilename":"README.markdown","_id":"resolve@0.2.5","dist":{"shasum":"2049e344ec140ac5c41024d5bdb4d9546336bf79","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.2.5.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.6":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.2.6","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"tap test/*.js"},"dependencies":{},"devDependencies":{"tap":"~0.2.4"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"resolve\u000a=======\u000a\u000aImplements the [node `require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000aexcept you can pass in the file to compute paths relatively to along with your\u000aown `require.paths` without updating the global copy (which doesn't even work in\u000anode `>=0.5`).\u000a\u000a[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\u000a\u000amethods\u000a=======\u000a\u000avar resolve = require('resolve');\u000a\u000aresolve.sync(pkg, opts)\u000a-----------------------\u000a\u000aSynchronously search for the package/filename string `pkg`\u000aaccording to the [`require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000afor `X=pkg` and `Y=opts.basedir`.\u000a\u000aDefault values for `opts`:\u000a\u000a````javascript\u000a{\u000a    paths : [],\u000a    basedir : __dirname,\u000a    extensions : [ '.js' ],\u000a    readFileSync : fs.readFileSync,\u000a    isFile : function (file) {\u000a        return path.existSync(file) && fs.statSync(file).isFile()\u000a    }\u000a}\u000a````\u000a\u000aOptionally you can specify a `opts.packageFilter` function to map the contents\u000aof `JSON.parse()`'d package.json files.\u000a\u000aIf nothing is found, all of the directories in `opts.paths` are searched.\u000a\u000aresolve.isCore(pkg)\u000a-------------------\u000a\u000aReturn whether a package is in core.\u000a","readmeFilename":"README.markdown","_id":"resolve@0.2.6","dist":{"shasum":"fd43d238fb9feffe677da88acfdd0da0e02ec6e0","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.2.6.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.7":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.2.7","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"tap test/*.js"},"dependencies":{},"devDependencies":{"tap":"~0.2.4"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"resolve\u000a=======\u000a\u000aImplements the [node `require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000aexcept you can pass in the file to compute paths relatively to along with your\u000aown `require.paths` without updating the global copy (which doesn't even work in\u000anode `>=0.5`).\u000a\u000a[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\u000a\u000amethods\u000a=======\u000a\u000avar resolve = require('resolve');\u000a\u000aresolve.sync(pkg, opts)\u000a-----------------------\u000a\u000aSynchronously search for the package/filename string `pkg`\u000aaccording to the [`require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000afor `X=pkg` and `Y=opts.basedir`.\u000a\u000aDefault values for `opts`:\u000a\u000a````javascript\u000a{\u000a    paths : [],\u000a    basedir : __dirname,\u000a    extensions : [ '.js' ],\u000a    readFileSync : fs.readFileSync,\u000a    isFile : function (file) {\u000a        return path.existSync(file) && fs.statSync(file).isFile()\u000a    }\u000a}\u000a````\u000a\u000aOptionally you can specify a `opts.packageFilter` function to map the contents\u000aof `JSON.parse()`'d package.json files.\u000a\u000aIf nothing is found, all of the directories in `opts.paths` are searched.\u000a\u000aresolve.isCore(pkg)\u000a-------------------\u000a\u000aReturn whether a package is in core.\u000a","readmeFilename":"README.markdown","_id":"resolve@0.2.7","dist":{"shasum":"133fb57a56182b4c542c271491c57026d3b3bd06","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.2.7.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.8":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.2.8","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"tap test/*.js"},"dependencies":{},"devDependencies":{"tap":"~0.2.4"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"resolve\u000a=======\u000a\u000aImplements the [node `require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000aexcept you can pass in the file to compute paths relatively to along with your\u000aown `require.paths` without updating the global copy (which doesn't even work in\u000anode `>=0.5`).\u000a\u000a[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\u000a\u000amethods\u000a=======\u000a\u000avar resolve = require('resolve');\u000a\u000aresolve.sync(pkg, opts)\u000a-----------------------\u000a\u000aSynchronously search for the package/filename string `pkg`\u000aaccording to the [`require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000afor `X=pkg` and `Y=opts.basedir`.\u000a\u000aDefault values for `opts`:\u000a\u000a````javascript\u000a{\u000a    paths : [],\u000a    basedir : __dirname,\u000a    extensions : [ '.js' ],\u000a    readFileSync : fs.readFileSync,\u000a    isFile : function (file) {\u000a        return path.existSync(file) && fs.statSync(file).isFile()\u000a    }\u000a}\u000a````\u000a\u000aOptionally you can specify a `opts.packageFilter` function to map the contents\u000aof `JSON.parse()`'d package.json files.\u000a\u000aIf nothing is found, all of the directories in `opts.paths` are searched.\u000a\u000aresolve.isCore(pkg)\u000a-------------------\u000a\u000aReturn whether a package is in core.\u000a","readmeFilename":"README.markdown","_id":"resolve@0.2.8","dist":{"shasum":"fdb17d4abb0ecaf6f80d67ac03cf290088f6c0d0","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.2.8.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.3.0":{"name":"resolve","description":"resolve like require.resolve() on behalf of files asynchronously and synchronously","version":"0.3.0","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"scripts":{"test":"tap test/*.js"},"devDependencies":{"tap":"~0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"# resolve\u000a\u000aimplements the [node `require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000asuch that you can `require.resolve()` on behalf of a file asynchronously and\u000asynchronously\u000a\u000a[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\u000a\u000a# example\u000a\u000aasynchronously resolve:\u000a\u000a``` js\u000avar resolve = require('resolve');\u000aresolve('tap', { basedir: __dirname }, function (err, res) {\u000a    if (err) console.error(err)\u000a    else console.log(res)\u000a});\u000a```\u000a\u000a```\u000a$ node example/async.js\u000a/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\u000a```\u000a\u000asynchronously resolve:\u000a\u000a``` js\u000avar resolve = require('resolve');\u000avar res = resolve.sync('tap', { basedir: __dirname });\u000aconsole.log(res);\u000a```\u000a\u000a```\u000a$ node example/sync.js\u000a/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\u000a```\u000a\u000a# methods\u000a\u000a``` js\u000avar resolve = require('resolve')\u000a```\u000a\u000a## resolve(pkg, opts={}, cb)\u000a\u000aAsynchronously resolve the module path string `pkg` into `cb(err, res)`.\u000a\u000aoptions are:\u000a\u000a* opts.basedir - directory to begin resolving from\u000a\u000a* opts.extensions - array of file extensions to search in order\u000a\u000a* opts.readFile - how to read files asynchronously\u000a\u000a* opts.isFile - function to asynchronously test whether a file exists\u000a\u000a* opts.packageFilter - transform the parsed package.json contents before looking\u000aat the \"main\" field\u000a\u000a* opts.paths - require.paths array to use if nothing is found on the normal\u000anode_modules recursive walk (probably don't use this)\u000a\u000adefault `opts` values:\u000a\u000a``` javascript\u000a{\u000a    paths: [],\u000a    basedir: __dirname,\u000a    extensions: [ '.js' ],\u000a    readFile: fs.readFile,\u000a    isFile: function (file, cb) {\u000a        fs.stat(file, function (err, stat) {\u000a            if (err && err.code === 'ENOENT') cb(null, false)\u000a            else if (err) cb(err)\u000a            else cb(null, stat.isFile())\u000a        });\u000a    }\u000a}\u000a```\u000a\u000a## resolve.sync(pkg, opts)\u000a\u000aSynchronously resolve the module path string `pkg`, returning the result and\u000athrowing an error when `pkg` can't be resolved.\u000a\u000aoptions are:\u000a\u000a* opts.basedir - directory to begin resolving from\u000a\u000a* opts.extensions - array of file extensions to search in order\u000a\u000a* opts.readFile - how to read files synchronously\u000a\u000a* opts.isFile - function to synchronously test whether a file exists\u000a\u000a* opts.packageFilter - transform the parsed package.json contents before looking\u000aat the \"main\" field\u000a\u000a* opts.paths - require.paths array to use if nothing is found on the normal\u000anode_modules recursive walk (probably don't use this)\u000a\u000adefault `opts` values:\u000a\u000a``` javascript\u000a{\u000a    paths: [],\u000a    basedir: __dirname,\u000a    extensions: [ '.js' ],\u000a    readFileSync: fs.readFileSync,\u000a    isFile: function (file) {\u000a        try { return fs.statSync(file).isFile() }\u000a        catch (e) { return false }\u000a    }\u000a}\u000a````\u000a\u000a## resolve.isCore(pkg)\u000a\u000aReturn whether a package is in core.\u000a\u000a# install\u000a\u000aWith [npm](https://npmjs.org) do:\u000a\u000a```\u000anpm install resolve\u000a```\u000a\u000a# license\u000a\u000aMIT\u000a","readmeFilename":"readme.markdown","_id":"resolve@0.3.0","dist":{"shasum":"c9ca553334490ac68f75494aee2083e600994dce","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.3.0.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}],"directories":{}},"0.3.1":{"name":"resolve","description":"resolve like require.resolve() on behalf of files asynchronously and synchronously","version":"0.3.1","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"scripts":{"test":"tap test/*.js"},"devDependencies":{"tap":"~0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"# resolve\u000a\u000aimplements the [node `require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000asuch that you can `require.resolve()` on behalf of a file asynchronously and\u000asynchronously\u000a\u000a[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\u000a\u000a# example\u000a\u000aasynchronously resolve:\u000a\u000a``` js\u000avar resolve = require('resolve');\u000aresolve('tap', { basedir: __dirname }, function (err, res) {\u000a    if (err) console.error(err)\u000a    else console.log(res)\u000a});\u000a```\u000a\u000a```\u000a$ node example/async.js\u000a/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\u000a```\u000a\u000asynchronously resolve:\u000a\u000a``` js\u000avar resolve = require('resolve');\u000avar res = resolve.sync('tap', { basedir: __dirname });\u000aconsole.log(res);\u000a```\u000a\u000a```\u000a$ node example/sync.js\u000a/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\u000a```\u000a\u000a# methods\u000a\u000a``` js\u000avar resolve = require('resolve')\u000a```\u000a\u000a## resolve(pkg, opts={}, cb)\u000a\u000aAsynchronously resolve the module path string `pkg` into `cb(err, res)`.\u000a\u000aoptions are:\u000a\u000a* opts.basedir - directory to begin resolving from\u000a\u000a* opts.extensions - array of file extensions to search in order\u000a\u000a* opts.readFile - how to read files asynchronously\u000a\u000a* opts.isFile - function to asynchronously test whether a file exists\u000a\u000a* opts.packageFilter - transform the parsed package.json contents before looking\u000aat the \"main\" field\u000a\u000a* opts.paths - require.paths array to use if nothing is found on the normal\u000anode_modules recursive walk (probably don't use this)\u000a\u000adefault `opts` values:\u000a\u000a``` javascript\u000a{\u000a    paths: [],\u000a    basedir: __dirname,\u000a    extensions: [ '.js' ],\u000a    readFile: fs.readFile,\u000a    isFile: function (file, cb) {\u000a        fs.stat(file, function (err, stat) {\u000a            if (err && err.code === 'ENOENT') cb(null, false)\u000a            else if (err) cb(err)\u000a            else cb(null, stat.isFile())\u000a        });\u000a    }\u000a}\u000a```\u000a\u000a## resolve.sync(pkg, opts)\u000a\u000aSynchronously resolve the module path string `pkg`, returning the result and\u000athrowing an error when `pkg` can't be resolved.\u000a\u000aoptions are:\u000a\u000a* opts.basedir - directory to begin resolving from\u000a\u000a* opts.extensions - array of file extensions to search in order\u000a\u000a* opts.readFile - how to read files synchronously\u000a\u000a* opts.isFile - function to synchronously test whether a file exists\u000a\u000a* opts.packageFilter - transform the parsed package.json contents before looking\u000aat the \"main\" field\u000a\u000a* opts.paths - require.paths array to use if nothing is found on the normal\u000anode_modules recursive walk (probably don't use this)\u000a\u000adefault `opts` values:\u000a\u000a``` javascript\u000a{\u000a    paths: [],\u000a    basedir: __dirname,\u000a    extensions: [ '.js' ],\u000a    readFileSync: fs.readFileSync,\u000a    isFile: function (file) {\u000a        try { return fs.statSync(file).isFile() }\u000a        catch (e) { return false }\u000a    }\u000a}\u000a````\u000a\u000a## resolve.isCore(pkg)\u000a\u000aReturn whether a package is in core.\u000a\u000a# install\u000a\u000aWith [npm](https://npmjs.org) do:\u000a\u000a```\u000anpm install resolve\u000a```\u000a\u000a# license\u000a\u000aMIT\u000a","readmeFilename":"readme.markdown","_id":"resolve@0.3.1","dist":{"shasum":"34c63447c664c70598d1c9b126fc43b2a24310a4","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.3.1.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}],"directories":{}},"0.4.0":{"name":"resolve","description":"resolve like require.resolve() on behalf of files asynchronously and synchronously","version":"0.4.0","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"scripts":{"test":"tap test/*.js"},"devDependencies":{"tap":"~0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"# resolve\u000a\u000aimplements the [node `require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000asuch that you can `require.resolve()` on behalf of a file asynchronously and\u000asynchronously\u000a\u000a[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\u000a\u000a# example\u000a\u000aasynchronously resolve:\u000a\u000a``` js\u000avar resolve = require('resolve');\u000aresolve('tap', { basedir: __dirname }, function (err, res) {\u000a    if (err) console.error(err)\u000a    else console.log(res)\u000a});\u000a```\u000a\u000a```\u000a$ node example/async.js\u000a/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\u000a```\u000a\u000asynchronously resolve:\u000a\u000a``` js\u000avar resolve = require('resolve');\u000avar res = resolve.sync('tap', { basedir: __dirname });\u000aconsole.log(res);\u000a```\u000a\u000a```\u000a$ node example/sync.js\u000a/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\u000a```\u000a\u000a# methods\u000a\u000a``` js\u000avar resolve = require('resolve')\u000a```\u000a\u000a## resolve(pkg, opts={}, cb)\u000a\u000aAsynchronously resolve the module path string `pkg` into `cb(err, res)`.\u000a\u000aoptions are:\u000a\u000a* opts.basedir - directory to begin resolving from\u000a\u000a* opts.package - package from which module is being loaded\u000a\u000a* opts.extensions - array of file extensions to search in order\u000a\u000a* opts.readFile - how to read files asynchronously\u000a\u000a* opts.isFile - function to asynchronously test whether a file exists\u000a\u000a* opts.packageFilter - transform the parsed package.json contents before looking\u000aat the \"main\" field\u000a\u000a* opts.paths - require.paths array to use if nothing is found on the normal\u000anode_modules recursive walk (probably don't use this)\u000a\u000adefault `opts` values:\u000a\u000a``` javascript\u000a{\u000a    paths: [],\u000a    basedir: __dirname,\u000a    extensions: [ '.js' ],\u000a    readFile: fs.readFile,\u000a    isFile: function (file, cb) {\u000a        fs.stat(file, function (err, stat) {\u000a            if (err && err.code === 'ENOENT') cb(null, false)\u000a            else if (err) cb(err)\u000a            else cb(null, stat.isFile())\u000a        });\u000a    }\u000a}\u000a```\u000a\u000a## resolve.sync(pkg, opts)\u000a\u000aSynchronously resolve the module path string `pkg`, returning the result and\u000athrowing an error when `pkg` can't be resolved.\u000a\u000aoptions are:\u000a\u000a* opts.basedir - directory to begin resolving from\u000a\u000a* opts.extensions - array of file extensions to search in order\u000a\u000a* opts.readFile - how to read files synchronously\u000a\u000a* opts.isFile - function to synchronously test whether a file exists\u000a\u000a* opts.packageFilter - transform the parsed package.json contents before looking\u000aat the \"main\" field\u000a\u000a* opts.paths - require.paths array to use if nothing is found on the normal\u000anode_modules recursive walk (probably don't use this)\u000a\u000adefault `opts` values:\u000a\u000a``` javascript\u000a{\u000a    paths: [],\u000a    basedir: __dirname,\u000a    extensions: [ '.js' ],\u000a    readFileSync: fs.readFileSync,\u000a    isFile: function (file) {\u000a        try { return fs.statSync(file).isFile() }\u000a        catch (e) { return false }\u000a    }\u000a}\u000a````\u000a\u000a## resolve.isCore(pkg)\u000a\u000aReturn whether a package is in core.\u000a\u000a# install\u000a\u000aWith [npm](https://npmjs.org) do:\u000a\u000a```\u000anpm install resolve\u000a```\u000a\u000a# license\u000a\u000aMIT\u000a","readmeFilename":"readme.markdown","_id":"resolve@0.4.0","dist":{"shasum":"531d572fab054e12e89fd545ad65b2e49555c34c","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.4.0.tgz"},"_npmVersion":"1.1.71","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}],"directories":{}},"0.4.1":{"name":"resolve","description":"resolve like require.resolve() on behalf of files asynchronously and synchronously","version":"0.4.1","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"scripts":{"test":"tap test/*.js"},"devDependencies":{"tap":"~0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"# resolve\u000a\u000aimplements the [node `require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000asuch that you can `require.resolve()` on behalf of a file asynchronously and\u000asynchronously\u000a\u000a[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\u000a\u000a# example\u000a\u000aasynchronously resolve:\u000a\u000a``` js\u000avar resolve = require('resolve');\u000aresolve('tap', { basedir: __dirname }, function (err, res) {\u000a    if (err) console.error(err)\u000a    else console.log(res)\u000a});\u000a```\u000a\u000a```\u000a$ node example/async.js\u000a/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\u000a```\u000a\u000asynchronously resolve:\u000a\u000a``` js\u000avar resolve = require('resolve');\u000avar res = resolve.sync('tap', { basedir: __dirname });\u000aconsole.log(res);\u000a```\u000a\u000a```\u000a$ node example/sync.js\u000a/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\u000a```\u000a\u000a# methods\u000a\u000a``` js\u000avar resolve = require('resolve')\u000a```\u000a\u000a## resolve(pkg, opts={}, cb)\u000a\u000aAsynchronously resolve the module path string `pkg` into `cb(err, res)`.\u000a\u000aoptions are:\u000a\u000a* opts.basedir - directory to begin resolving from\u000a\u000a* opts.package - package from which module is being loaded\u000a\u000a* opts.extensions - array of file extensions to search in order\u000a\u000a* opts.readFile - how to read files asynchronously\u000a\u000a* opts.isFile - function to asynchronously test whether a file exists\u000a\u000a* opts.packageFilter - transform the parsed package.json contents before looking\u000aat the \"main\" field\u000a\u000a* opts.paths - require.paths array to use if nothing is found on the normal\u000anode_modules recursive walk (probably don't use this)\u000a\u000adefault `opts` values:\u000a\u000a``` javascript\u000a{\u000a    paths: [],\u000a    basedir: __dirname,\u000a    extensions: [ '.js' ],\u000a    readFile: fs.readFile,\u000a    isFile: function (file, cb) {\u000a        fs.stat(file, function (err, stat) {\u000a            if (err && err.code === 'ENOENT') cb(null, false)\u000a            else if (err) cb(err)\u000a            else cb(null, stat.isFile())\u000a        });\u000a    }\u000a}\u000a```\u000a\u000a## resolve.sync(pkg, opts)\u000a\u000aSynchronously resolve the module path string `pkg`, returning the result and\u000athrowing an error when `pkg` can't be resolved.\u000a\u000aoptions are:\u000a\u000a* opts.basedir - directory to begin resolving from\u000a\u000a* opts.extensions - array of file extensions to search in order\u000a\u000a* opts.readFile - how to read files synchronously\u000a\u000a* opts.isFile - function to synchronously test whether a file exists\u000a\u000a* opts.packageFilter - transform the parsed package.json contents before looking\u000aat the \"main\" field\u000a\u000a* opts.paths - require.paths array to use if nothing is found on the normal\u000anode_modules recursive walk (probably don't use this)
159 error registry error parsing json
160 silly registry.get cb [ 200,
160 silly registry.get   { date: 'Sun, 16 Mar 2014 09:23:24 GMT',
160 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R16B)',
160 silly registry.get     etag: '"CR360AYPPNKQZ7Z1PO5WCXHT5"',
160 silly registry.get     'content-type': 'application/json',
160 silly registry.get     via: '1.1 varnish',
160 silly registry.get     'cache-control': 'max-age=1',
160 silly registry.get     'content-length': '70906',
160 silly registry.get     'accept-ranges': 'bytes',
160 silly registry.get     age: '0',
160 silly registry.get     'x-served-by': 'cache-v37-ASH, cache-ty67-TYO',
160 silly registry.get     'x-cache': 'MISS, MISS',
160 silly registry.get     'x-cache-hits': '0, 0',
160 silly registry.get     'x-timer': 'S1394961804.359681845,VS0,VS484,VE639,VE325',
160 silly registry.get     vary: 'Accept',
160 silly registry.get     'keep-alive': 'timeout=10, max=50',
160 silly registry.get     connection: 'Keep-Alive' } ]
161 silly lockFile 7958d065-resolve-0-3-1 resolve@~0.3.1
162 silly lockFile 7958d065-resolve-0-3-1 resolve@~0.3.1
163 verbose about to build C:\Users\liz\AppData\Roaming\npm\node_modules\grunt-cli
164 info C:\Users\liz\AppData\Roaming\npm\node_modules\grunt-cli unbuild
165 info preuninstall grunt-cli@0.1.13
166 info uninstall grunt-cli@0.1.13
167 verbose true,C:\Users\liz\AppData\Roaming\npm\node_modules,C:\Users\liz\AppData\Roaming\npm\node_modules unbuild grunt-cli@0.1.13
168 verbose C:\Users\liz\AppData\Roaming\npm,[object Object] binRoot
169 info postuninstall grunt-cli@0.1.13
170 error SyntaxError: Unexpected end of input
170 error {"_id":"resolve","_rev":"59-1cc5b3baf687407f3e5fb09bde8bae96","name":"resolve","description":"resolve like require.resolve() on behalf of files asynchronously and synchronously","dist-tags":{"latest":"0.6.1"},"versions":{"0.0.0":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.0.0","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"expresso"},"dependencies":{},"devDependencies":{"expresso":"=0.7.x"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_id":"resolve@0.0.0","_engineSupported":true,"_npmVersion":"1.0.10","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"9a74e26be2ea4fb18960236f1448b0e38bcc93e5","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.0.0.tgz"}},"0.0.1":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.0.1","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"expresso"},"dependencies":{},"devDependencies":{"expresso":"=0.7.x"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_id":"resolve@0.0.1","_engineSupported":true,"_npmVersion":"1.0.10","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"d7188e3ae59196f3556cd4cfcedf7a9b12fb55e9","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.0.1.tgz"}},"0.0.2":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.0.2","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"expresso"},"dependencies":{},"devDependencies":{"expresso":"=0.7.x"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_id":"resolve@0.0.2","_engineSupported":true,"_npmVersion":"1.0.10","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"9c6835475096251f8b2e292ddd45df2974c64162","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.0.2.tgz"}},"0.0.3":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.0.3","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"expresso"},"dependencies":{},"devDependencies":{"expresso":"=0.7.x"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_id":"resolve@0.0.3","_engineSupported":true,"_npmVersion":"1.0.10","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"8212502b729a63fe8dea0af1920a58538b161742","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.0.3.tgz"}},"0.0.4":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.0.4","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"expresso"},"dependencies":{},"devDependencies":{"expresso":"=0.7.x"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_id":"resolve@0.0.4","_engineSupported":true,"_npmVersion":"1.0.10","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"b3f7d9c3b46a0f512984940a4b23f30176dda95d","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.0.4.tgz"}},"0.1.0":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.1.0","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"expresso"},"dependencies":{},"devDependencies":{"expresso":"=0.7.x"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_npmJsonOpts":{"file":"/home/substack/.npm/resolve/0.1.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"resolve@0.1.0","_engineSupported":true,"_npmVersion":"1.0.30","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"de35cfc7e7048e566f99056ad0b06d7cce8d49cb","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.1.0.tgz"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.1.2":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.1.2","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"expresso"},"dependencies":{},"devDependencies":{"expresso":"=0.7.x"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_npmUser":{"name":"substack","email":"mail@substack.net"},"_id":"resolve@0.1.2","_engineSupported":true,"_npmVersion":"1.0.101","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"37eaa50a0b586adac455b9fa6dc45217e6b002e7","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.1.2.tgz"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.1.3":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.1.3","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"expresso"},"dependencies":{},"devDependencies":{"expresso":"=0.7.x"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_npmUser":{"name":"substack","email":"mail@substack.net"},"_id":"resolve@0.1.3","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"204c18364bc529a0b376e4a714b7ba44f0d390d1","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.1.3.tgz"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.0":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.2.0","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"expresso"},"dependencies":{},"devDependencies":{"expresso":"0.7.x"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_npmUser":{"name":"substack","email":"mail@substack.net"},"_id":"resolve@0.2.0","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"136daea49be374950974cd30858c66a6d1c9bbe4","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.2.0.tgz"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.1":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.2.1","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"tap test/*.js"},"dependencies":{},"devDependencies":{"tap":"~0.2.4"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_npmUser":{"name":"substack","email":"mail@substack.net"},"_id":"resolve@0.2.1","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"39689c97d867b40d865adec160358bee91da7f5a","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.2.1.tgz"},"readme":"","maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.2":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.2.2","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"tap test/*.js"},"dependencies":{},"devDependencies":{"tap":"~0.2.4"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"_npmUser":{"name":"substack","email":"mail@substack.net"},"_id":"resolve@0.2.2","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"69116e81b47e0e4aa9a9231b271605a73dbf8b8d","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.2.2.tgz"},"readme":"","maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.3":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.2.3","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"tap test/*.js"},"dependencies":{},"devDependencies":{"tap":"~0.2.4"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"","_id":"resolve@0.2.3","dist":{"shasum":"f1eb7fb76436f91d87fd19c5f973fe7d506f6571","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.2.3.tgz"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.4":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.2.4","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"tap test/*.js"},"dependencies":{},"devDependencies":{"tap":"~0.2.4"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"resolve\u000a=======\u000a\u000aImplements the [node `require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000aexcept you can pass in the file to compute paths relatively to along with your\u000aown `require.paths` without updating the global copy (which doesn't even work in\u000anode `>=0.5`).\u000a\u000a[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\u000a\u000amethods\u000a=======\u000a\u000avar resolve = require('resolve');\u000a\u000aresolve.sync(pkg, opts)\u000a-----------------------\u000a\u000aSynchronously search for the package/filename string `pkg`\u000aaccording to the [`require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000afor `X=pkg` and `Y=opts.basedir`.\u000a\u000aDefault values for `opts`:\u000a\u000a````javascript\u000a{\u000a    paths : [],\u000a    basedir : __dirname,\u000a    extensions : [ '.js' ],\u000a    readFileSync : fs.readFileSync,\u000a    isFile : function (file) {\u000a        return path.existSync(file) && fs.statSync(file).isFile()\u000a    }\u000a}\u000a````\u000a\u000aOptionally you can specify a `opts.packageFilter` function to map the contents\u000aof `JSON.parse()`'d package.json files.\u000a\u000aIf nothing is found, all of the directories in `opts.paths` are searched.\u000a\u000aresolve.isCore(pkg)\u000a-------------------\u000a\u000aReturn whether a package is in core.\u000a","readmeFilename":"README.markdown","_id":"resolve@0.2.4","dist":{"shasum":"47d5e3e845108807480ffed66f40e533d330704d","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.2.4.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.5":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.2.5","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"tap test/*.js"},"dependencies":{},"devDependencies":{"tap":"~0.2.4"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"resolve\u000a=======\u000a\u000aImplements the [node `require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000aexcept you can pass in the file to compute paths relatively to along with your\u000aown `require.paths` without updating the global copy (which doesn't even work in\u000anode `>=0.5`).\u000a\u000a[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\u000a\u000amethods\u000a=======\u000a\u000avar resolve = require('resolve');\u000a\u000aresolve.sync(pkg, opts)\u000a-----------------------\u000a\u000aSynchronously search for the package/filename string `pkg`\u000aaccording to the [`require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000afor `X=pkg` and `Y=opts.basedir`.\u000a\u000aDefault values for `opts`:\u000a\u000a````javascript\u000a{\u000a    paths : [],\u000a    basedir : __dirname,\u000a    extensions : [ '.js' ],\u000a    readFileSync : fs.readFileSync,\u000a    isFile : function (file) {\u000a        return path.existSync(file) && fs.statSync(file).isFile()\u000a    }\u000a}\u000a````\u000a\u000aOptionally you can specify a `opts.packageFilter` function to map the contents\u000aof `JSON.parse()`'d package.json files.\u000a\u000aIf nothing is found, all of the directories in `opts.paths` are searched.\u000a\u000aresolve.isCore(pkg)\u000a-------------------\u000a\u000aReturn whether a package is in core.\u000a","readmeFilename":"README.markdown","_id":"resolve@0.2.5","dist":{"shasum":"2049e344ec140ac5c41024d5bdb4d9546336bf79","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.2.5.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.6":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.2.6","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"tap test/*.js"},"dependencies":{},"devDependencies":{"tap":"~0.2.4"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"resolve\u000a=======\u000a\u000aImplements the [node `require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000aexcept you can pass in the file to compute paths relatively to along with your\u000aown `require.paths` without updating the global copy (which doesn't even work in\u000anode `>=0.5`).\u000a\u000a[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\u000a\u000amethods\u000a=======\u000a\u000avar resolve = require('resolve');\u000a\u000aresolve.sync(pkg, opts)\u000a-----------------------\u000a\u000aSynchronously search for the package/filename string `pkg`\u000aaccording to the [`require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000afor `X=pkg` and `Y=opts.basedir`.\u000a\u000aDefault values for `opts`:\u000a\u000a````javascript\u000a{\u000a    paths : [],\u000a    basedir : __dirname,\u000a    extensions : [ '.js' ],\u000a    readFileSync : fs.readFileSync,\u000a    isFile : function (file) {\u000a        return path.existSync(file) && fs.statSync(file).isFile()\u000a    }\u000a}\u000a````\u000a\u000aOptionally you can specify a `opts.packageFilter` function to map the contents\u000aof `JSON.parse()`'d package.json files.\u000a\u000aIf nothing is found, all of the directories in `opts.paths` are searched.\u000a\u000aresolve.isCore(pkg)\u000a-------------------\u000a\u000aReturn whether a package is in core.\u000a","readmeFilename":"README.markdown","_id":"resolve@0.2.6","dist":{"shasum":"fd43d238fb9feffe677da88acfdd0da0e02ec6e0","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.2.6.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.7":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.2.7","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"tap test/*.js"},"dependencies":{},"devDependencies":{"tap":"~0.2.4"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"resolve\u000a=======\u000a\u000aImplements the [node `require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000aexcept you can pass in the file to compute paths relatively to along with your\u000aown `require.paths` without updating the global copy (which doesn't even work in\u000anode `>=0.5`).\u000a\u000a[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\u000a\u000amethods\u000a=======\u000a\u000avar resolve = require('resolve');\u000a\u000aresolve.sync(pkg, opts)\u000a-----------------------\u000a\u000aSynchronously search for the package/filename string `pkg`\u000aaccording to the [`require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000afor `X=pkg` and `Y=opts.basedir`.\u000a\u000aDefault values for `opts`:\u000a\u000a````javascript\u000a{\u000a    paths : [],\u000a    basedir : __dirname,\u000a    extensions : [ '.js' ],\u000a    readFileSync : fs.readFileSync,\u000a    isFile : function (file) {\u000a        return path.existSync(file) && fs.statSync(file).isFile()\u000a    }\u000a}\u000a````\u000a\u000aOptionally you can specify a `opts.packageFilter` function to map the contents\u000aof `JSON.parse()`'d package.json files.\u000a\u000aIf nothing is found, all of the directories in `opts.paths` are searched.\u000a\u000aresolve.isCore(pkg)\u000a-------------------\u000a\u000aReturn whether a package is in core.\u000a","readmeFilename":"README.markdown","_id":"resolve@0.2.7","dist":{"shasum":"133fb57a56182b4c542c271491c57026d3b3bd06","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.2.7.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.8":{"name":"resolve","description":"A more hookable require.resolve() implementation","version":"0.2.8","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"directories":{"lib":".","example":"example","test":"test"},"scripts":{"test":"tap test/*.js"},"dependencies":{},"devDependencies":{"tap":"~0.2.4"},"engines":{"node":">=0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"resolve\u000a=======\u000a\u000aImplements the [node `require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000aexcept you can pass in the file to compute paths relatively to along with your\u000aown `require.paths` without updating the global copy (which doesn't even work in\u000anode `>=0.5`).\u000a\u000a[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\u000a\u000amethods\u000a=======\u000a\u000avar resolve = require('resolve');\u000a\u000aresolve.sync(pkg, opts)\u000a-----------------------\u000a\u000aSynchronously search for the package/filename string `pkg`\u000aaccording to the [`require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000afor `X=pkg` and `Y=opts.basedir`.\u000a\u000aDefault values for `opts`:\u000a\u000a````javascript\u000a{\u000a    paths : [],\u000a    basedir : __dirname,\u000a    extensions : [ '.js' ],\u000a    readFileSync : fs.readFileSync,\u000a    isFile : function (file) {\u000a        return path.existSync(file) && fs.statSync(file).isFile()\u000a    }\u000a}\u000a````\u000a\u000aOptionally you can specify a `opts.packageFilter` function to map the contents\u000aof `JSON.parse()`'d package.json files.\u000a\u000aIf nothing is found, all of the directories in `opts.paths` are searched.\u000a\u000aresolve.isCore(pkg)\u000a-------------------\u000a\u000aReturn whether a package is in core.\u000a","readmeFilename":"README.markdown","_id":"resolve@0.2.8","dist":{"shasum":"fdb17d4abb0ecaf6f80d67ac03cf290088f6c0d0","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.2.8.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.3.0":{"name":"resolve","description":"resolve like require.resolve() on behalf of files asynchronously and synchronously","version":"0.3.0","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"scripts":{"test":"tap test/*.js"},"devDependencies":{"tap":"~0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"# resolve\u000a\u000aimplements the [node `require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000asuch that you can `require.resolve()` on behalf of a file asynchronously and\u000asynchronously\u000a\u000a[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\u000a\u000a# example\u000a\u000aasynchronously resolve:\u000a\u000a``` js\u000avar resolve = require('resolve');\u000aresolve('tap', { basedir: __dirname }, function (err, res) {\u000a    if (err) console.error(err)\u000a    else console.log(res)\u000a});\u000a```\u000a\u000a```\u000a$ node example/async.js\u000a/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\u000a```\u000a\u000asynchronously resolve:\u000a\u000a``` js\u000avar resolve = require('resolve');\u000avar res = resolve.sync('tap', { basedir: __dirname });\u000aconsole.log(res);\u000a```\u000a\u000a```\u000a$ node example/sync.js\u000a/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\u000a```\u000a\u000a# methods\u000a\u000a``` js\u000avar resolve = require('resolve')\u000a```\u000a\u000a## resolve(pkg, opts={}, cb)\u000a\u000aAsynchronously resolve the module path string `pkg` into `cb(err, res)`.\u000a\u000aoptions are:\u000a\u000a* opts.basedir - directory to begin resolving from\u000a\u000a* opts.extensions - array of file extensions to search in order\u000a\u000a* opts.readFile - how to read files asynchronously\u000a\u000a* opts.isFile - function to asynchronously test whether a file exists\u000a\u000a* opts.packageFilter - transform the parsed package.json contents before looking\u000aat the \"main\" field\u000a\u000a* opts.paths - require.paths array to use if nothing is found on the normal\u000anode_modules recursive walk (probably don't use this)\u000a\u000adefault `opts` values:\u000a\u000a``` javascript\u000a{\u000a    paths: [],\u000a    basedir: __dirname,\u000a    extensions: [ '.js' ],\u000a    readFile: fs.readFile,\u000a    isFile: function (file, cb) {\u000a        fs.stat(file, function (err, stat) {\u000a            if (err && err.code === 'ENOENT') cb(null, false)\u000a            else if (err) cb(err)\u000a            else cb(null, stat.isFile())\u000a        });\u000a    }\u000a}\u000a```\u000a\u000a## resolve.sync(pkg, opts)\u000a\u000aSynchronously resolve the module path string `pkg`, returning the result and\u000athrowing an error when `pkg` can't be resolved.\u000a\u000aoptions are:\u000a\u000a* opts.basedir - directory to begin resolving from\u000a\u000a* opts.extensions - array of file extensions to search in order\u000a\u000a* opts.readFile - how to read files synchronously\u000a\u000a* opts.isFile - function to synchronously test whether a file exists\u000a\u000a* opts.packageFilter - transform the parsed package.json contents before looking\u000aat the \"main\" field\u000a\u000a* opts.paths - require.paths array to use if nothing is found on the normal\u000anode_modules recursive walk (probably don't use this)\u000a\u000adefault `opts` values:\u000a\u000a``` javascript\u000a{\u000a    paths: [],\u000a    basedir: __dirname,\u000a    extensions: [ '.js' ],\u000a    readFileSync: fs.readFileSync,\u000a    isFile: function (file) {\u000a        try { return fs.statSync(file).isFile() }\u000a        catch (e) { return false }\u000a    }\u000a}\u000a````\u000a\u000a## resolve.isCore(pkg)\u000a\u000aReturn whether a package is in core.\u000a\u000a# install\u000a\u000aWith [npm](https://npmjs.org) do:\u000a\u000a```\u000anpm install resolve\u000a```\u000a\u000a# license\u000a\u000aMIT\u000a","readmeFilename":"readme.markdown","_id":"resolve@0.3.0","dist":{"shasum":"c9ca553334490ac68f75494aee2083e600994dce","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.3.0.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}],"directories":{}},"0.3.1":{"name":"resolve","description":"resolve like require.resolve() on behalf of files asynchronously and synchronously","version":"0.3.1","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"scripts":{"test":"tap test/*.js"},"devDependencies":{"tap":"~0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"# resolve\u000a\u000aimplements the [node `require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000asuch that you can `require.resolve()` on behalf of a file asynchronously and\u000asynchronously\u000a\u000a[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\u000a\u000a# example\u000a\u000aasynchronously resolve:\u000a\u000a``` js\u000avar resolve = require('resolve');\u000aresolve('tap', { basedir: __dirname }, function (err, res) {\u000a    if (err) console.error(err)\u000a    else console.log(res)\u000a});\u000a```\u000a\u000a```\u000a$ node example/async.js\u000a/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\u000a```\u000a\u000asynchronously resolve:\u000a\u000a``` js\u000avar resolve = require('resolve');\u000avar res = resolve.sync('tap', { basedir: __dirname });\u000aconsole.log(res);\u000a```\u000a\u000a```\u000a$ node example/sync.js\u000a/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\u000a```\u000a\u000a# methods\u000a\u000a``` js\u000avar resolve = require('resolve')\u000a```\u000a\u000a## resolve(pkg, opts={}, cb)\u000a\u000aAsynchronously resolve the module path string `pkg` into `cb(err, res)`.\u000a\u000aoptions are:\u000a\u000a* opts.basedir - directory to begin resolving from\u000a\u000a* opts.extensions - array of file extensions to search in order\u000a\u000a* opts.readFile - how to read files asynchronously\u000a\u000a* opts.isFile - function to asynchronously test whether a file exists\u000a\u000a* opts.packageFilter - transform the parsed package.json contents before looking\u000aat the \"main\" field\u000a\u000a* opts.paths - require.paths array to use if nothing is found on the normal\u000anode_modules recursive walk (probably don't use this)\u000a\u000adefault `opts` values:\u000a\u000a``` javascript\u000a{\u000a    paths: [],\u000a    basedir: __dirname,\u000a    extensions: [ '.js' ],\u000a    readFile: fs.readFile,\u000a    isFile: function (file, cb) {\u000a        fs.stat(file, function (err, stat) {\u000a            if (err && err.code === 'ENOENT') cb(null, false)\u000a            else if (err) cb(err)\u000a            else cb(null, stat.isFile())\u000a        });\u000a    }\u000a}\u000a```\u000a\u000a## resolve.sync(pkg, opts)\u000a\u000aSynchronously resolve the module path string `pkg`, returning the result and\u000athrowing an error when `pkg` can't be resolved.\u000a\u000aoptions are:\u000a\u000a* opts.basedir - directory to begin resolving from\u000a\u000a* opts.extensions - array of file extensions to search in order\u000a\u000a* opts.readFile - how to read files synchronously\u000a\u000a* opts.isFile - function to synchronously test whether a file exists\u000a\u000a* opts.packageFilter - transform the parsed package.json contents before looking\u000aat the \"main\" field\u000a\u000a* opts.paths - require.paths array to use if nothing is found on the normal\u000anode_modules recursive walk (probably don't use this)\u000a\u000adefault `opts` values:\u000a\u000a``` javascript\u000a{\u000a    paths: [],\u000a    basedir: __dirname,\u000a    extensions: [ '.js' ],\u000a    readFileSync: fs.readFileSync,\u000a    isFile: function (file) {\u000a        try { return fs.statSync(file).isFile() }\u000a        catch (e) { return false }\u000a    }\u000a}\u000a````\u000a\u000a## resolve.isCore(pkg)\u000a\u000aReturn whether a package is in core.\u000a\u000a# install\u000a\u000aWith [npm](https://npmjs.org) do:\u000a\u000a```\u000anpm install resolve\u000a```\u000a\u000a# license\u000a\u000aMIT\u000a","readmeFilename":"readme.markdown","_id":"resolve@0.3.1","dist":{"shasum":"34c63447c664c70598d1c9b126fc43b2a24310a4","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.3.1.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}],"directories":{}},"0.4.0":{"name":"resolve","description":"resolve like require.resolve() on behalf of files asynchronously and synchronously","version":"0.4.0","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"scripts":{"test":"tap test/*.js"},"devDependencies":{"tap":"~0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"# resolve\u000a\u000aimplements the [node `require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000asuch that you can `require.resolve()` on behalf of a file asynchronously and\u000asynchronously\u000a\u000a[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\u000a\u000a# example\u000a\u000aasynchronously resolve:\u000a\u000a``` js\u000avar resolve = require('resolve');\u000aresolve('tap', { basedir: __dirname }, function (err, res) {\u000a    if (err) console.error(err)\u000a    else console.log(res)\u000a});\u000a```\u000a\u000a```\u000a$ node example/async.js\u000a/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\u000a```\u000a\u000asynchronously resolve:\u000a\u000a``` js\u000avar resolve = require('resolve');\u000avar res = resolve.sync('tap', { basedir: __dirname });\u000aconsole.log(res);\u000a```\u000a\u000a```\u000a$ node example/sync.js\u000a/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\u000a```\u000a\u000a# methods\u000a\u000a``` js\u000avar resolve = require('resolve')\u000a```\u000a\u000a## resolve(pkg, opts={}, cb)\u000a\u000aAsynchronously resolve the module path string `pkg` into `cb(err, res)`.\u000a\u000aoptions are:\u000a\u000a* opts.basedir - directory to begin resolving from\u000a\u000a* opts.package - package from which module is being loaded\u000a\u000a* opts.extensions - array of file extensions to search in order\u000a\u000a* opts.readFile - how to read files asynchronously\u000a\u000a* opts.isFile - function to asynchronously test whether a file exists\u000a\u000a* opts.packageFilter - transform the parsed package.json contents before looking\u000aat the \"main\" field\u000a\u000a* opts.paths - require.paths array to use if nothing is found on the normal\u000anode_modules recursive walk (probably don't use this)\u000a\u000adefault `opts` values:\u000a\u000a``` javascript\u000a{\u000a    paths: [],\u000a    basedir: __dirname,\u000a    extensions: [ '.js' ],\u000a    readFile: fs.readFile,\u000a    isFile: function (file, cb) {\u000a        fs.stat(file, function (err, stat) {\u000a            if (err && err.code === 'ENOENT') cb(null, false)\u000a            else if (err) cb(err)\u000a            else cb(null, stat.isFile())\u000a        });\u000a    }\u000a}\u000a```\u000a\u000a## resolve.sync(pkg, opts)\u000a\u000aSynchronously resolve the module path string `pkg`, returning the result and\u000athrowing an error when `pkg` can't be resolved.\u000a\u000aoptions are:\u000a\u000a* opts.basedir - directory to begin resolving from\u000a\u000a* opts.extensions - array of file extensions to search in order\u000a\u000a* opts.readFile - how to read files synchronously\u000a\u000a* opts.isFile - function to synchronously test whether a file exists\u000a\u000a* opts.packageFilter - transform the parsed package.json contents before looking\u000aat the \"main\" field\u000a\u000a* opts.paths - require.paths array to use if nothing is found on the normal\u000anode_modules recursive walk (probably don't use this)\u000a\u000adefault `opts` values:\u000a\u000a``` javascript\u000a{\u000a    paths: [],\u000a    basedir: __dirname,\u000a    extensions: [ '.js' ],\u000a    readFileSync: fs.readFileSync,\u000a    isFile: function (file) {\u000a        try { return fs.statSync(file).isFile() }\u000a        catch (e) { return false }\u000a    }\u000a}\u000a````\u000a\u000a## resolve.isCore(pkg)\u000a\u000aReturn whether a package is in core.\u000a\u000a# install\u000a\u000aWith [npm](https://npmjs.org) do:\u000a\u000a```\u000anpm install resolve\u000a```\u000a\u000a# license\u000a\u000aMIT\u000a","readmeFilename":"readme.markdown","_id":"resolve@0.4.0","dist":{"shasum":"531d572fab054e12e89fd545ad65b2e49555c34c","tarball":"http://registry.npmjs.org/resolve/-/resolve-0.4.0.tgz"},"_npmVersion":"1.1.71","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}],"directories":{}},"0.4.1":{"name":"resolve","description":"resolve like require.resolve() on behalf of files asynchronously and synchronously","version":"0.4.1","repository":{"type":"git","url":"git://github.com/substack/node-resolve.git"},"main":"index.js","keywords":["resolve","require","node","module"],"scripts":{"test":"tap test/*.js"},"devDependencies":{"tap":"~0.4.0"},"license":"MIT","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"readme":"# resolve\u000a\u000aimplements the [node `require.resolve()`\u000aalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\u000asuch that you can `require.resolve()` on behalf of a file asynchronously and\u000asynchronously\u000a\u000a[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\u000a\u000a# example\u000a\u000aasynchronously resolve:\u000a\u000a``` js\u000avar resolve = require('resolve');\u000aresolve('tap', { basedir: __dirname }, function (err, res) {\u000a    if (err) console.error(err)\u000a    else console.log(res)\u000a});\u000a```\u000a\u000a```\u000a$ node example/async.js\u000a/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\u000a```\u000a\u000asynchronously resolve:\u000a\u000a``` js\u000avar resolve = require('resolve');\u000avar res = resolve.sync('tap', { basedir: __dirname });\u000aconsole.log(res);\u000a```\u000a\u000a```\u000a$ node example/sync.js\u000a/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\u000a```\u000a\u000a# methods\u000a\u000a``` js\u000avar resolve = require('resolve')\u000a```\u000a\u000a## resolve(pkg, opts={}, cb)\u000a\u000aAsynchronously resolve the module path string `pkg` into `cb(err, res)`.\u000a\u000aoptions are:\u000a\u000a* opts.basedir - directory to begin resolving from\u000a\u000a* opts.package - package from which module is being loaded\u000a\u000a* opts.extensions - array of file extensions to search in order\u000a\u000a* opts.readFile - how to read files asynchronously\u000a\u000a* opts.isFile - function to asynchronously test whether a file exists\u000a\u000a* opts.packageFilter - transform the parsed package.json contents before looking\u000aat the \"main\" field\u000a\u000a* opts.paths - require.paths array to use if nothing is found on the normal\u000anode_modules recursive walk (probably don't use this)\u000a\u000adefault `opts` values:\u000a\u000a``` javascript\u000a{\u000a    paths: [],\u000a    basedir: __dirname,\u000a    extensions: [ '.js' ],\u000a    readFile: fs.readFile,\u000a    isFile: function (file, cb) {\u000a        fs.stat(file, function (err, stat) {\u000a            if (err && err.code === 'ENOENT') cb(null, false)\u000a            else if (err) cb(err)\u000a            else cb(null, stat.isFile())\u000a        });\u000a    }\u000a}\u000a```\u000a\u000a## resolve.sync(pkg, opts)\u000a\u000aSynchronously resolve the module path string `pkg`, returning the result and\u000athrowing an error when `pkg` can't be resolved.\u000a\u000aoptions are:\u000a\u000a* opts.basedir - directory to begin resolving from\u000a\u000a* opts.extensions - array of file extensions to search in order\u000a\u000a* opts.readFile - how to read files synchronously\u000a\u000a* opts.isFile - function to synchronously test whether a file exists\u000a\u000a* opts.packageFilter - transform the parsed package.json contents before looking\u000aat the \"main\" field\u000a\u000a* opts.paths - require.paths array to use if nothing is found on the normal\u000anode_modules recursive walk (probably don't use this)
170 error     at Object.parse (native)
170 error     at RegClient.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:203:23)
170 error     at Request.self.callback (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:123:22)
170 error     at Request.EventEmitter.emit (events.js:98:17)
170 error     at Request.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:893:14)
170 error     at Request.EventEmitter.emit (events.js:117:20)
170 error     at IncomingMessage.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:844:12)
170 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
170 error     at _stream_readable.js:920:16
170 error     at process._tickCallback (node.js:415:13)
171 error If you need help, you may report this *entire* log,
171 error including the npm and node versions, at:
171 error     <http://github.com/npm/npm/issues>
172 error System Windows_NT 6.1.7601
173 error command "C:\\Program Files\\nodejs\\\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "install" "-g" "grunt-cli"
174 error cwd D:\项目\InCar Project\svn\Code\Incar\web
175 error node -v v0.10.26
176 error npm -v 1.4.3
177 error type unexpected_eos
178 verbose exit [ 1, true ]
